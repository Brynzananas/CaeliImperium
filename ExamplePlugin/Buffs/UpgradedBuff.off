using R2API;
using RoR2;
using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using UnityEngine.UIElements;
using static KitchenSanFieroPlugin.KitchenSanFiero;
using static R2API.RecalculateStatsAPI;

namespace KitchenSanFiero.Buffs
{
    internal static class UpgradedBuff
    {
        public static BuffDef UpgradedBuffDef;
        internal static Sprite UpgradedIcon;
        internal static void Init()
        {


            UpgradedIcon = MainAssets.LoadAsset<Sprite>("Assets/Icons/PainkillersIcon.png");

            Buff();

        }
        private static void Buff()
        {
            UpgradedBuffDef = ScriptableObject.CreateInstance<BuffDef>();
            UpgradedBuffDef.name = "Upgraded";
            UpgradedBuffDef.buffColor = Color.red;
            UpgradedBuffDef.canStack = false;
            UpgradedBuffDef.isDebuff = false;
            UpgradedBuffDef.ignoreGrowthNectar = true;
            UpgradedBuffDef.iconSprite = UpgradedIcon;
            UpgradedBuffDef.isHidden = false;
            UpgradedBuffDef.isCooldown = false;
            ContentAddition.AddBuffDef(UpgradedBuffDef);
            GetStatCoefficients += Stats;
            On.RoR2.CharacterBody.OnBuffFirstStackGained += Effect;
            On.RoR2.CharacterBody.OnBuffFinalStackLost += RemoveUpgrade;
        }

        private static void RemoveUpgrade(On.RoR2.CharacterBody.orig_OnBuffFinalStackLost orig, CharacterBody self, BuffDef buffDef)
        {
            orig(self, buffDef);
            if (buffDef == UpgradedBuffDef)
            {
                self.SetBuffCount(UpgradedLevelBuff.UpgradedLevelBuffDef.buffIndex, 0);
            }
        }

        private static void Effect(On.RoR2.CharacterBody.orig_OnBuffFirstStackGained orig, CharacterBody self, BuffDef buffDef)
        {
            orig(self, buffDef);
            if (buffDef == UpgradedBuffDef)
            {
            EffectManager.SimpleImpactEffect(LegacyResourcesAPI.Load<GameObject>("Prefabs/Effects/ImpactEffects/IceRingExplosion"), self.transform.position, Vector3.up, true);

            }
        }

        private static void Stats(CharacterBody sender, StatHookEventArgs args)
        {
            args.attackSpeedMultAdd += 0.5f * sender.GetBuffCount(UpgradedLevelBuff.UpgradedLevelBuffDef);
            args.damageMultAdd += 0.5f * sender.GetBuffCount(UpgradedLevelBuff.UpgradedLevelBuffDef);
            args.moveSpeedMultAdd += 0.5f * sender.GetBuffCount(UpgradedLevelBuff.UpgradedLevelBuffDef);
        }
    }
}
