using R2API;
using RoR2;
using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine.AddressableAssets;
using UnityEngine;
using static KitchenSanFieroPlugin.KitchenSanFiero;
using static R2API.RecalculateStatsAPI;

namespace KitchenSanFiero.Items
{
    internal static class Chalk //: ItemBase<FirstItem>
    {
        internal static GameObject ChalkPrefab;
        internal static Sprite ChalkIcon;
        public static ItemDef ChalkItemDef;


        internal static void Init()
        {
            ChalkPrefab = MainAssets.LoadAsset<GameObject>("Assets/Models/Prefabs/Item/PainKillers.prefab");
            ChalkIcon = MainAssets.LoadAsset<Sprite>("Assets/Materials/Item/Painkillers/PainkillersIcon.png");

            Item();

            AddLanguageTokens();
        }
        private static void Item()
        {
            ChalkItemDef = ScriptableObject.CreateInstance<ItemDef>();
            ChalkItemDef.name = "Chalk";
            ChalkItemDef.nameToken = "CHALKE_NAME";
            ChalkItemDef.pickupToken = "CHALKE_PICKUP";
            ChalkItemDef.descriptionToken = "CHALKE_DESC";
            ChalkItemDef.loreToken = "CHALKE_LORE";
            switch (PainkillersTier.Value)
            {
                case 1:
                    ChalkItemDef.deprecatedTier = ItemTier.Tier1;
                    break;
                case 2:
                    ChalkItemDef.deprecatedTier = ItemTier.Tier2;
                    break;
                case 3:
                    ChalkItemDef.deprecatedTier = ItemTier.Tier3;
                    break;

            }
            ChalkItemDef.pickupIconSprite = ChalkIcon;
            ChalkItemDef.pickupModelPrefab = ChalkPrefab;
            ChalkItemDef.canRemove = true;
            ChalkItemDef.hidden = false;
            if (PainkillersAIBlacklist.Value)
            {
                ChalkItemDef.tags = new[]
                {
                    ItemTag.Utility,
                    ItemTag.AIBlacklist
                };
            }
            else
            {
                ChalkItemDef.tags = new[]
                {
                    ItemTag.Utility
                };
            }
            var displayRules = new ItemDisplayRuleDict(null);
            ItemAPI.Add(new CustomItem(ChalkItemDef, displayRules));
            On.RoR2.CharacterBody.FixedUpdate += UpdateStats;
            //GetStatCoefficients += Stats;
        }
        
        private static void UpdateStats(On.RoR2.CharacterBody.orig_FixedUpdate orig, CharacterBody self)
        {
            orig(self);
            int itemCount = self.inventory ? self.inventory.GetItemCount(ChalkItemDef) : 0;
            if (itemCount > 0)
            {

                self.damage = self.damage + ((float)Math.Sin(Time.timeSinceLevelLoad) * itemCount + itemCount) * 4;
            }
        }
        /*
        private static void Stats(CharacterBody sender, StatHookEventArgs args)
        {
            int itemCount = sender.inventory ? sender.inventory.GetItemCount(ChalkItemDef) : 0;
            if (itemCount > 0)
            {
                args.baseDamageAdd += ((float)Math.Sin(Time.timeSinceLevelLoad) * itemCount + itemCount) * 4;
            }

        }
        */
        private static void AddLanguageTokens()
        {
            LanguageAPI.Add("CHALKE_NAME", "Chalk");
            LanguageAPI.Add("CHALKE_PICKUP", "<style=cIsUtility>Gain " + PainkillersArmor.Value + " armor</style> <style=cStack>per item stack<style=cStack>");
            LanguageAPI.Add("CHALKE_DESC", "<style=cIsUtility>Gain " + PainkillersArmor.Value + " armor</style> <style=cStack>per item stack<style=cStack>");
            LanguageAPI.Add("CHALKE_LORE", "mmmm yummy");
        }
    }
}
