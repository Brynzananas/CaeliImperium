using R2API;
using RoR2;
using System;
using System.Collections.Generic;
using System.Text;
using static R2API.RecalculateStatsAPI;
using UnityEngine;
using static KitchenSanFieroPlugin.KitchenSanFiero;

namespace KitchenSanFiero.Items
{
    internal static class CLownMakeUp
    {
        internal static GameObject ClownMakeUpPrefab;
        internal static Sprite ClownMakeUpIcon;
        public static ItemDef ClownMakeUpItemDef;
        public static float timer;


        internal static void Init()
        {
            ClownMakeUpPrefab = MainAssets.LoadAsset<GameObject>("Assets/Models/Prefabs/Item/PainKillers.prefab");
            ClownMakeUpIcon = MainAssets.LoadAsset<Sprite>("Assets/Materials/Item/Painkillers/PainkillersIcon.png");

            Item();

            AddLanguageTokens();
        }
        private static void Item()
        {
            ClownMakeUpItemDef = ScriptableObject.CreateInstance<ItemDef>();
            ClownMakeUpItemDef.name = "ClownMakeUp";
            ClownMakeUpItemDef.nameToken = "CLOWNMAKEUP_NAME";
            ClownMakeUpItemDef.pickupToken = "CLOWNMAKEUP_PICKUP";
            ClownMakeUpItemDef.descriptionToken = "CLOWNMAKEUP_DESC";
            ClownMakeUpItemDef.loreToken = "CLOWNMAKEUP_LORE";
            switch (PainkillersTier.Value)
            {
                case 1:
                    ClownMakeUpItemDef.deprecatedTier = ItemTier.Tier1;
                    break;
                case 2:
                    ClownMakeUpItemDef.deprecatedTier = ItemTier.Tier2;
                    break;
                case 3:
                    ClownMakeUpItemDef.deprecatedTier = ItemTier.Tier3;
                    break;

            }
            ClownMakeUpItemDef.pickupIconSprite = ClownMakeUpIcon;
            ClownMakeUpItemDef.pickupModelPrefab = ClownMakeUpPrefab;
            ClownMakeUpItemDef.canRemove = true;
            ClownMakeUpItemDef.hidden = false;
            if (PainkillersAIBlacklist.Value)
            {
                ClownMakeUpItemDef.tags = new[]
                {
                    ItemTag.Utility,
                    ItemTag.AIBlacklist
                };
            }
            else
            {
                ClownMakeUpItemDef.tags = new[]
                {
                    ItemTag.Utility
                };
            }
            var displayRules = new ItemDisplayRuleDict(null);
            ItemAPI.Add(new CustomItem(ClownMakeUpItemDef, displayRules));
            //On.RoR2.PurchaseInteraction.OnInteractionBegin += OnChestOpen;
            //On.RoR2.CharacterBody.OnInventoryChanged += OnItemPickup;
            //On.RoR2.CharacterBody.FixedUpdate += Copium;
            //GetStatCoefficients += Stats;
        }
        /*
        private static void OnItemPickup(On.RoR2.CharacterBody.orig_OnInventoryChanged orig, CharacterBody self)
        {
            orig(self);
            if (self.inventory.GetItemCount(ClownMakeUpItemDef) > 0)
            {
                timer = 0;
            }
        }

        private static void Copium(On.RoR2.CharacterBody.orig_FixedUpdate orig, CharacterBody self)
        {
            throw new NotImplementedException();
        }

        private static void OnChestOpen(On.RoR2.PurchaseInteraction.orig_OnInteractionBegin orig, PurchaseInteraction self, Interactor activator)
        {
            orig(self, activator);
            var characterBody = activator.gameObject.GetComponent<CharacterBody>();
            int inventoryCount = characterBody.inventory.GetItemCount(ClownMakeUpItemDef);
            int inventoryWhiteCount = characterBody.inventory.GetTotalItemCountOfTier(ItemTier);
            if (inventoryCount > 0)
            {

            }
        }

        private static void Stats(CharacterBody sender, StatHookEventArgs args)
        {
            int itemCount = sender.inventory ? sender.inventory.GetItemCount(ClownMakeUpItemDef) : 0;
            if (itemCount > 0)
            {
                args.baseDamageAdd += (Time.timeSinceLevelLoad * itemCount + itemCount) * 5;
            }

        }
        */
        private static void AddLanguageTokens()
        {
            LanguageAPI.Add("CLOWNMAKEUP_NAME", "Chalk");
            LanguageAPI.Add("CLOWNMAKEUP_PICKUP", "<style=cIsUtility>Gain " + PainkillersArmor.Value + " armor</style> <style=cStack>per item stack<style=cStack>");
            LanguageAPI.Add("CLOWNMAKEUP_DESC", "<style=cIsUtility>Gain " + PainkillersArmor.Value + " armor</style> <style=cStack>per item stack<style=cStack>");
            LanguageAPI.Add("CLOWNMAKEUP_LORE", "mmmm yummy");
        }
    }
}
